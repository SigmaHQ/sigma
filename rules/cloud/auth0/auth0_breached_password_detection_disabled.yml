title: Breached Password Detection - critical settings manipulated
id: 412ccc61-54a4-488c-a5c5-f1e58a64bdcb
status: experimental
description: |
    Detects when Breached Password Detection has been disabled at all or set to a monitoring mode where no blocking occurs.
    This can allow malicious actors to continue credential stuffing without being detected and blocked.
references:
    - https://auth0.com/docs/secure/attack-protection/breached-password-detection
    - https://github.com/auth0/auth0-customer-detections/
author: Okta, Austin Songer @austinsonger
date: 2025-07-11
modified: 2025-08-19
tags:
    - attack.defense-evasion
    - attack.t1562
    - attack.t1562.007
logsource:
    product: auth0
    service: attack_protection
detection:
    selection:
        data.type: sapi
        data.description:
            - Update Breached Password Detection settings
    filter_1:
        data.details.response.body.enabled: false
    filter_2:
        data.details.response.body.shields{}: 'block'
    filter_3:
        data.details.response.body.stage.pre-user-registration.shields{}: 'block'
    condition: (selection and filter_1) or (selection and not filter_2) or (selection and not filter_3)
fields:
    - data.type
    - data.description
    - data.ip
    - data.details.response.body.enabled
    - data.details.response.body.shields{}
    - data.details.response.body.stage.pre-user-registration.shields{}
falsepositives:
    - Legitimate updates by an administrator during configuration changes
    - Temporary disabling for maintenance or troubleshooting
    - Emergency security configuration changes
level: medium
explanation: |
    The query filters for the latest modification of the Breached Password Detection.
    It returns a record when the feature is completely disabled, i.e. the "shields" attribute does not contain "block", or set into a monitoring mode by disabling all responses.
    The splunk query below considers only the last modification and displays a modifying IP, state of the protection for login and signup modes, and if user notifications are switched on.

    Splunk Query:
    index=auth0 data.tenant_name="{your-tenant-name}"
    data.type=sapi data.description="Update Breached Password Detection settings"
    | sort - _time
    | head 1
    | rename data.details.response.body.shields{} as login_shields
    | rename data.details.response.body.enabled as breached_protection_enabled
    | rename data.details.response.body.stage.pre-user-registration.shields{} as signup_shields
    | eval user_notifications_on = if(isnotnull(mvfind(login_shields, "user_notification")), "true", "false")
    | eval login_flow_is_protected = if(isnotnull(mvfind(login_shields, "block")), "true", "false")
    | eval signup_flow_is_protected = if(isnotnull(mvfind(signup_shields, "block")), "true", "false")
    | where breached_protection_enabled = "false" OR (login_flow_is_protected = "false" AND signup_flow_is_protected = "false")
    | table _time, data.ip, breached_protection_enabled, login_flow_is_protected, signup_flow_is_protected, user_notifications_on

    Tenant Logs Query:
    type: "sapi" AND description: "Update Breached Password Detection settings"
comments:
    - The splunk query above shall be tuned to reflect a valid tenant name.
    - Limit the detection to actions conducted from not white-listed IPs and/or a particular admin user.
    - Prevention - Control tenant admins, i.e. "Admin", as this role has permissions to modify any application.
    - Prevention - Enforce MFA for tenant admins to reduce the risk of an adversary gaining access.
    - Prevention - Control Management API scopes that allow modification of attack protection features - update:attack_protection.
    - Prevention - Control usage of Management API from only trusted IPs by applying Network ACL scoped to "management".
